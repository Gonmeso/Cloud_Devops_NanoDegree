Parameters:
  VPCCIDR:
    Type: String
  PrivSubnet1CIDR:
    Type: String
  PubSubnet1CIDR:
    Type: String
  PrivSubnet2CIDR:
    Type: String
  PubSubnet2CIDR:
    Type: String
Resources:

  # ----------- VPC and SUBNETS -----------
  # HA implies using 2 AZs, for this we need 2 public subnets and 2 private subnets, one single IGW
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: Name
          Value: "Udagram VPC"

  InternetGateWay:
    Type: AWS::EC2::InternetGateway

  IGAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateWay

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      # Availability zone at your discretion or
      # as a parameter
      AvailabilityZone: "eu-west-1a"
      CidrBlock: !Ref PubSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public Subnet 1"
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "eu-west-1b"
      CidrBlock: !Ref PrivSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Private Subnet 1"
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      # Availability zone at your discretion or
      # as a parameter
      AvailabilityZone: "eu-west-1b"
      CidrBlock: !Ref PubSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public Subnet 2"
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "eu-west-1a"
      CidrBlock: !Ref PrivSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Private Subnet 2"
      VpcId: !Ref VPC

  # ----------- NAT Gateway -----------
  # For HA NAT we need to create one in each subnets, this also affects de ElasticIP
  NATGateWay1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIP1
          - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "NAT to be used by servers in the private subnet 1"

  NATGateWay2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIP2
          - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: "NAT to be used by servers in the private subnet 2"

  ElasticIP1:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: "Elastic IP for our NAT Gateway in public subnet 1"

  ElasticIP2:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: "Elastic IP for our NAT Gateway in public subnet 2"

  # ----------- ROUTES -----------
  # For AZ we need one route table fot the public and 2 for the private subnets as each one needs to use its own NATGateway
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: "Private Route Table 1"
      VpcId: !Ref VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: "Private Route Table 2"
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: "Public Route Table"
      VpcId: !Ref VPC

  AssociatePUBRT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  AssociatePUBRT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  AssociatePRIVRT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  AssociatePRIVRT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateWay

  PrivateInternetOutboundRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateWay1

  PrivateInternetOutboundRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateWay2

Outputs:
  PublicSubnetID1:
    Description: Subnet 1 ID for the ELB association
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnetID1
  PublicSubnetID2:
    Description: Subnet 2 ID for the ELB association
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnetID2
  PrivateSubnetID1:
    Description: Subnet 1 ID for the autoscaling group
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnetID1
  PrivateSubnetID2:
    Description: Subnet 2 ID for the autoscaling group
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnetID2
  UdagramVPC:
    Description: VPC of Udagram
    Value: !Ref VPC
    Export:
      Name: UdagramVPC
